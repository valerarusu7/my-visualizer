{"version":3,"sources":["SortingAlgorithms/mergeSortAlgo.js","SortingAlgorithms/quickSortAlgo.js","SortingAlgorithms/bubbleSortAlgo.js","SortingAlgorithms/selectionSortAlgo.js","hoc/Auxiliar.js","containers/SortingChart/SortingChart.js","SortingAlgorithms/insertionSortAlgo.js","App.js","serviceWorker.js","index.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","i","j","push","doMerge","getQuickSortAnimations","auxillaryArray","quickSort","startIndex","endIndex","pivotIndex","pivot","swap","partitionArray","javaScriptSortedArray","sort","a","b","console","log","firstArray","secondArray","arraysAreEqual","firstIndex","secondIndex","temp","getBubbleSortAnimations","N","bubbleSort","getSelectionSortAnimations","minIndex","selectionSort","aux","props","children","NUMBER_OF_ARRAY_BARS","window","screen","width","randomIntFromInterval","min","max","random","arrayOne","arrayTwo","SortingChart","state","ANIMATION_SPEED_MS","timer","this","resetArray","height","setState","changedSpeed","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","isColorChange","barOneIndex","barTwoIndex","barIndex","barStyle","key","insertionSort","getInsertionSortAnimations","mergeSortedArray","className","onClick","mergeSort","map","value","idx","Component","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.22b09a3b.chunk.js","sourcesContent":["export function getMergeSortAnimations(array) {\r\n    const animations = [];\r\n    if (array.length <= 1) return array;\r\n    const auxiliaryArray = array.slice();\r\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\r\n    return animations;\r\n  }\r\n  \r\n  function mergeSortHelper(\r\n    mainArray,\r\n    startIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    if (startIdx === endIdx) return;\r\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\r\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\r\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\r\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\r\n  }\r\n  \r\n  function doMerge(\r\n    mainArray,\r\n    startIdx,\r\n    middleIdx,\r\n    endIdx,\r\n    auxiliaryArray,\r\n    animations,\r\n  ) {\r\n    let k = startIdx;\r\n    let i = startIdx;\r\n    let j = middleIdx + 1;\r\n    while (i <= middleIdx && j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, j]);\r\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index i in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[i]]);\r\n        mainArray[k++] = auxiliaryArray[i++];\r\n      } else {\r\n        // We overwrite the value at index k in the original array with the\r\n        // value at index j in the auxiliary array.\r\n        animations.push([k, auxiliaryArray[j]]);\r\n        mainArray[k++] = auxiliaryArray[j++];\r\n      }\r\n    }\r\n    while (i <= middleIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([i, i]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([i, i]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index i in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[i]]);\r\n      mainArray[k++] = auxiliaryArray[i++];\r\n    }\r\n    while (j <= endIdx) {\r\n      // These are the values that we're comparing; we push them once\r\n      // to change their color.\r\n      animations.push([j, j]);\r\n      // These are the values that we're comparing; we push them a second\r\n      // time to revert their color.\r\n      animations.push([j, j]);\r\n      // We overwrite the value at index k in the original array with the\r\n      // value at index j in the auxiliary array.\r\n      animations.push([k, auxiliaryArray[j]]);\r\n      mainArray[k++] = auxiliaryArray[j++];\r\n    }\r\n  }\r\n\r\n  ","export function getQuickSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    quickSort(auxillaryArray, 0, auxillaryArray.length - 1, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\ngetQuickSortAnimations([7,2,1,6]);\r\n\r\nfunction quickSort(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivotIndex;\r\n    if (startIndex < endIndex) {\r\n        pivotIndex = partitionArray(auxillaryArray, startIndex, endIndex, animations);\r\n        quickSort(auxillaryArray, startIndex, pivotIndex - 1, animations);\r\n        quickSort(auxillaryArray, pivotIndex + 1, endIndex, animations);\r\n    }\r\n}\r\n\r\nfunction partitionArray(auxillaryArray, startIndex, endIndex, animations) {\r\n    let pivot = auxillaryArray[endIndex];\r\n    let pivotIndex = startIndex;\r\n    for (let i = startIndex; i <= endIndex - 1; i++) {\r\n        animations.push([i, endIndex]);\r\n        animations.push([i, endIndex]);\r\n        if (auxillaryArray[i] <= pivot) {\r\n            //Swap these two heights\r\n            animations.push([i, auxillaryArray[pivotIndex]]);\r\n            animations.push([pivotIndex, auxillaryArray[i]]);\r\n            swap(auxillaryArray, i , pivotIndex);\r\n            pivotIndex++;\r\n        }\r\n        else {\r\n            animations.push([-1, -1]);\r\n            animations.push([-1, -1]);\r\n        }\r\n        animations.push([-1, -1]);\r\n        animations.push([-1, -1]);\r\n    }\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    animations.push([-1, -1]);\r\n    //Swap these two heights\r\n    animations.push([pivotIndex, auxillaryArray[endIndex]]);\r\n    animations.push([endIndex, auxillaryArray[pivotIndex]]);\r\n    swap(auxillaryArray, pivotIndex, endIndex);\r\n    return pivotIndex;\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}\r\n","export function getBubbleSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    bubbleSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction bubbleSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        for (let j = 0; j < N - i -1; j++) {\r\n            animations.push([j, j + 1]);\r\n            animations.push([j, j + 1]);\r\n            if (auxillaryArray[j] > auxillaryArray[j + 1]) {\r\n                animations.push([j, auxillaryArray[j + 1]]);\r\n                animations.push([j + 1, auxillaryArray[j]]);\r\n                swap(auxillaryArray, j, j + 1);\r\n            }\r\n            else {\r\n                animations.push([-1, -1]);\r\n                animations.push([-1, -1]);\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}\r\n","export function getSelectionSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    selectionSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction selectionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 0; i < N - 1; i++) {\r\n        let minIndex = i; //Finding minimum element in unsorted array\r\n        for (let j = i + 1; j < N; j++) {\r\n            animations.push([\"comparision1\", j, minIndex]);\r\n            animations.push([\"comparision2\", j, minIndex]);\r\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\r\n                minIndex = j;\r\n            }\r\n        }\r\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\r\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\r\n        // Swap the found minimum element with the first element\r\n        swap(auxillaryArray, minIndex, i);\r\n    }\r\n}\r\n\r\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\r\n    let temp = auxillaryArray[firstIndex];\r\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\r\n    auxillaryArray[secondIndex] = temp;\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}\r\n","const aux = (props) => props.children;\r\n\r\nexport default aux;","import React, { Component } from \"react\";\r\nimport { getMergeSortAnimations } from \"../../SortingAlgorithms/mergeSortAlgo\";\r\nimport { getQuickSortAnimations } from \"../../SortingAlgorithms/quickSortAlgo\";\r\nimport { getBubbleSortAnimations } from \"../../SortingAlgorithms/bubbleSortAlgo\";\r\nimport { getInsertionSortAnimations } from \"../../SortingAlgorithms/insertionSortAlgo\";\r\nimport { getSelectionSortAnimations } from \"../../SortingAlgorithms/selectionSortAlgo\";\r\n\r\nimport Aux from '../../hoc/Auxiliar';\r\n\r\nimport \"./SortingChart.css\";\r\n\r\nconst NUMBER_OF_ARRAY_BARS = window.screen.width / 5.5;\r\nconst PRIMARY_COLOR = \"#40a0e0\";\r\nconst SECONDARY_COLOR = \"orange\";\r\n\r\nclass SortingChart extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      array: [],\r\n      ANIMATION_SPEED_MS : 1,\r\n      timer : null\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.resetArray();\r\n  }\r\n\r\n  resetArray() {\r\n    const array = [];\r\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\r\n      array.push(randomIntFromInterval(5, window.screen.height - 250));\r\n    }\r\n    this.setState({ array });\r\n  }\r\n\r\n  increaseSpeed() {\r\n    const changedSpeed = this.state.ANIMATION_SPEED_MS - 0.3;\r\n    this.setState({ \r\n        ANIMATION_SPEED_MS: changedSpeed\r\n    });\r\n  }\r\n\r\n  mergeSort() {\r\n    let animations = this.state.animations;\r\n    animations = getMergeSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      const isColorChange = i % 3 !== 2;\r\n      if (isColorChange) {\r\n        const [barOneIdx, barTwoIdx] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIdx].style;\r\n        const barTwoStyle = arrayBars[barTwoIdx].style;\r\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.ANIMATION_SPEED_MS);\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = animations[i];\r\n          const barOneStyle = arrayBars[barOneIdx].style;\r\n          barOneStyle.height = `${newHeight}px`;\r\n        }, i * this.state.ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  quickSort() {\r\n    const [animations] = getQuickSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length - 1; i++) {\r\n      const isColorChange = i % 6 === 0 || i % 6 === 1;\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if (isColorChange === true) {\r\n        const color = i % 6 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        if (barOneIndex === -1) {\r\n          continue;\r\n        }\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [barIndex, newHeight] = animations[i];\r\n        if (barIndex === -1) {\r\n          continue;\r\n        }\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * this.state.ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  insertionSort() {\r\n    const [animations] = getInsertionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange =\r\n        animations[i][0] === \"comparision1\" ||\r\n        animations[i][0] === \"comparision2\";\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if (isColorChange === true) {\r\n        const color =\r\n          animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [temp, barIndex, newHeight] = animations[i];\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * this.state.ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  bubbleSort() {\r\n    const [animations] = getBubbleSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if (isColorChange === true) {\r\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const [barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [barIndex, newHeight] = animations[i];\r\n        if (barIndex === -1) {\r\n          continue;\r\n        }\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * this.state.ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  selectionSort() {\r\n    const [animations] = getSelectionSortAnimations(this.state.array);\r\n    for (let i = 0; i < animations.length; i++) {\r\n      const isColorChange =\r\n        animations[i][0] === \"comparision1\" ||\r\n        animations[i][0] === \"comparision2\";\r\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\r\n      if (isColorChange === true) {\r\n        const color =\r\n          animations[i][0] === \"comparision1\" ? SECONDARY_COLOR : PRIMARY_COLOR;\r\n        const [temp, barOneIndex, barTwoIndex] = animations[i];\r\n        const barOneStyle = arrayBars[barOneIndex].style;\r\n        const barTwoStyle = arrayBars[barTwoIndex].style;\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = color;\r\n          barTwoStyle.backgroundColor = color;\r\n        }, i * this.state.ANIMATION_SPEED_MS);\r\n      } else {\r\n        const [temp, barIndex, newHeight] = animations[i];\r\n        const barStyle = arrayBars[barIndex].style;\r\n        setTimeout(() => {\r\n          barStyle.height = `${newHeight}px`;\r\n        }, i * this.state.ANIMATION_SPEED_MS);\r\n      }\r\n    }\r\n  }\r\n\r\n  testSortingAlgorithms() {\r\n    for (let i = 0; i < 100; i++) {\r\n      const array = [];\r\n      const length = randomIntFromInterval(1, 1000);\r\n      for (let i = 0; i < length; i++) {\r\n        array.push(randomIntFromInterval(-1000, 1000));\r\n      }\r\n      const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n      const mergeSortedArray = getMergeSortAnimations(array.slice());\r\n      console.log(arraysAreEqual(javaScriptSortedArray, mergeSortedArray));\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { array } = this.state;\r\n\r\n    return (\r\n      <Aux>\r\n      <div className=\"array-display\">\r\n        <div className=\"top-bar-buttons\">\r\n          <button className=\"myButton\" onClick={() => this.resetArray()}>Generate New Array</button>\r\n          <button className=\"myButton\" onClick={() => this.mergeSort()}>Merge Sort</button>\r\n          <button className=\"myButton\" onClick={() => this.quickSort()}>Quick Sort</button>\r\n          <button className=\"myButton\" onClick={() => this.insertionSort()}>Insertion Sort</button>\r\n          <button className=\"myButton\" onClick={() => this.bubbleSort()}>Bubble Sort</button>\r\n          <button className=\"myButton\" onClick={() => this.selectionSort()}>Selection Sort</button>\r\n        </div>\r\n        <div className=\"array-container\">\r\n          {array.map((value, idx) => (\r\n            <div\r\n              className=\"array-bar\"\r\n              key={idx}\r\n              style={{\r\n                backgroundColor: PRIMARY_COLOR,\r\n                height: `${value}px`,\r\n              }}\r\n            ></div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      </Aux>\r\n    );\r\n  }\r\n}\r\n\r\nfunction randomIntFromInterval(min, max) {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nfunction arraysAreEqual(arrayOne, arrayTwo) {\r\n  if (arrayOne.length !== arrayTwo.length) return false;\r\n  for (let i = 0; i < arrayOne.length; i++) {\r\n    if (arrayOne[i] !== arrayTwo[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\nexport default SortingChart;\r\n","export function getInsertionSortAnimations(array) {\r\n    let animations  = [];\r\n    let auxillaryArray = array.slice();\r\n    insertionSort(auxillaryArray, animations);\r\n    const javaScriptSortedArray = array.slice().sort((a, b) => a - b);\r\n    console.log(\"sort works correctly? \",arraysAreEqual(javaScriptSortedArray, auxillaryArray));\r\n    array = auxillaryArray;\r\n    return [animations, array];\r\n}\r\n\r\nfunction insertionSort(auxillaryArray, animations) {\r\n    const N = auxillaryArray.length;\r\n    for (let i = 1; i < N; i++) {\r\n        let key = auxillaryArray[i];\r\n        let j = i - 1;\r\n        animations.push([\"comparision1\", j, i]);\r\n        animations.push([\"comparision2\", j, i]);\r\n        while(j >= 0 && auxillaryArray[j] > key) {\r\n            animations.push([\"overwrite\", j + 1, auxillaryArray[j]]);\r\n            auxillaryArray[j + 1] = auxillaryArray[j];\r\n            j = j - 1;\r\n            if(j >= 0) {\r\n                animations.push([\"comparision1\", j, i]);\r\n                animations.push([\"comparision2\", j, i]);\r\n            }     \r\n        }\r\n        animations.push([\"overwrite\", j + 1, key]);\r\n        auxillaryArray[j + 1] = key;\r\n    }\r\n}\r\n\r\nfunction arraysAreEqual(firstArray, secondArray) {\r\n    if (firstArray.length !== secondArray.length) {\r\n        return false;\r\n    }\r\n    for (let i = 0; i < firstArray.length; i++) {\r\n      if (firstArray[i] !== secondArray[i]) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n}\r\n","import React from 'react';\nimport './App.css';\n\nimport SortingChart from './containers/SortingChart/SortingChart';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <SortingChart />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}